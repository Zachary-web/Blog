"use strict";
function _objectSpread(a) {
    for (var b = 1; b < arguments.length; b++) {
        var c = null == arguments[b] ? {} : arguments[b],
            d = Object.keys(c);
        "function" == typeof Object.getOwnPropertySymbols && (d = d.concat(Object.getOwnPropertySymbols(c).filter(function(a) {
            return Object.getOwnPropertyDescriptor(c, a).enumerable
        }))), d.forEach(function(b) {
            _defineProperty(a, b, c[b])
        })
    }
    return a
}
function _defineProperty(a, b, c) {
    return b in a ? Object.defineProperty(a, b, {
        value: c,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : a[b] = c, a
}

class MetingJSElement extends HTMLElement {
    // 组件挂载时初始化（保留原有逻辑，确保依赖就绪）
    connectedCallback() {
        // 双重检查 APlayer 和 fetch 是否可用，避免未加载完成就执行
        if (window.APlayer && window.fetch) {
            try {
                this._init();
                this._parse();
            } catch (e) {
                console.error('MetingJS 初始化失败:', e);
            }
        } else {
            console.error('MetingJS 依赖缺失：APlayer 或 fetch 未可用');
        }
    }

    // 核心修复：组件销毁时添加存在性检查，避免 undefined 错误
    disconnectedCallback() {
        // 1. 若锁定状态，直接返回（保留原有逻辑）
        if (this.lock) return;

        // 2. 检查 aplayer 实例是否存在，且 destroy 是有效函数
        if (this.aplayer && typeof this.aplayer.destroy === 'function') {
            try {
                this.aplayer.destroy(); // 安全销毁 APlayer 实例
                console.log('MetingJS 播放器已销毁');
            } catch (e) {
                console.error('MetingJS 播放器销毁失败:', e);
            }
        } else {
            console.warn('MetingJS 销毁时：aplayer 实例未初始化');
        }
    }

    // 驼峰命名转换（保留原有逻辑）
    _camelize(a) {
        return a.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (a, b) => b.toUpperCase())
    }

    // 初始化属性配置（保留原有逻辑，补充默认值）
    _init() {
        let attrs = {};
        for (let b = 0; b < this.attributes.length; b += 1) {
            attrs[this._camelize(this.attributes[b].name)] = this.attributes[b].value;
        }

        // 核心元数据字段（保留原有）
        let metaKeys = ["server", "type", "id", "api", "auth", "auto", "lock", "name", "title", "artist", "author", "url", "cover", "pic", "lyric", "lrc"];
        this.meta = {};
        for (var c = 0; c < metaKeys.length; c++) {
            let d = metaKeys[c];
            this.meta[d] = attrs[d] || ''; // 补充默认空字符串，避免 undefined
            delete attrs[d];
        }

        this.config = attrs;
        // 修复：优先使用组件属性传入的 api（配合 vue.config.js 代理），其次用全局或默认
        this.api = this.meta.api || window.meting_api || "https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r";

        // 若配置 auto（音乐链接），自动解析
        if (this.meta.auto) {
            this._parse_link();
        }
    }

    // 解析音乐链接（保留原有逻辑）
    _parse_link() {
        let linkRules = [
            ["music.163.com.*song.*id=(\\d+)", "netease", "song"],
            ["music.163.com.*album.*id=(\\d+)", "netease", "album"],
            ["music.163.com.*artist.*id=(\\d+)", "netease", "artist"],
            ["music.163.com.*playlist.*id=(\\d+)", "netease", "playlist"],
            ["music.163.com.*discover/toplist.*id=(\\d+)", "netease", "playlist"],
            ["y.qq.com.*song/(\\w+).html", "tencent", "song"],
            ["y.qq.com.*album/(\\w+).html", "tencent", "album"],
            ["y.qq.com.*singer/(\\w+).html", "tencent", "artist"],
            ["y.qq.com.*playsquare/(\\w+).html", "tencent", "playlist"],
            ["y.qq.com.*playlist/(\\w+).html", "tencent", "playlist"],
            ["xiami.com.*song/(\\w+)", "xiami", "song"],
            ["xiami.com.*album/(\\w+)", "xiami", "album"],
            ["xiami.com.*artist/(\\w+)", "xiami", "artist"],
            ["xiami.com.*collect/(\\w+)", "xiami", "playlist"]
        ];

        for (var b = 0; b < linkRules.length; b++) {
            let [regex, server, type] = linkRules[b];
            let reg = new RegExp(regex);
            let match = reg.exec(this.meta.auto);
            if (null !== match) {
                this.meta.server = server;
                this.meta.type = type;
                this.meta.id = match[1];
                return;
            }
        }
    }

    // 解析音乐数据（保留原有逻辑，补充错误捕获）
    _parse() {
        // 若直接配置 url（本地音乐），无需调用 API
        if (this.meta.url) {
            let audio = {
                name: this.meta.name || this.meta.title || "Audio name",
                artist: this.meta.artist || this.meta.author || "Audio artist",
                url: this.meta.url,
                cover: this.meta.cover || this.meta.pic,
                lrc: this.meta.lrc || this.meta.lyric || "",
                type: this.meta.type || "auto"
            };
            this.meta.lrcType = audio.lrc ? (this.innerText ? 2 : 1) : 0;
            this.innerText && (audio.lrc = this.innerText);
            this._loadPlayer([audio]);
            return;
        }

        // 调用 API 获取音乐数据（补充错误捕获）
        let apiUrl = this.api
            .replace(":server", this.meta.server)
            .replace(":type", this.meta.type)
            .replace(":id", this.meta.id)
            .replace(":auth", this.meta.auth)
            .replace(":r", Math.random()); // 加随机参数避免缓存

        fetch(apiUrl)
            .then(res => {
                if (!res.ok) throw new Error(`API 请求失败: ${res.status}`);
                return res.json();
            })
            .then(data => this._loadPlayer(data))
            .catch(e => console.error('MetingJS 获取音乐数据失败:', e));
    }

    // 加载 APlayer 播放器（保留原有逻辑，补充实例检查）
    _loadPlayer(audioList) {
        if (!audioList || audioList.length === 0) {
            console.error('MetingJS 加载失败：无有效音乐数据');
            return;
        }

        let defaultConfig = {
            audio: audioList,
            mutex: true, // 互斥播放（同一时间只播放一个）
            lrcType: this.meta.lrcType || 3,
            storageName: "metingjs"
        };

        // 合并配置（处理布尔值字符串→布尔值）
        let finalConfig = _objectSpread({}, defaultConfig, this.config);
        for (let key in finalConfig) {
            if (finalConfig[key] === "true" || finalConfig[key] === "false") {
                finalConfig[key] = finalConfig[key] === "true";
            }
        }

        // 创建播放器容器并初始化
        try {
            let container = document.createElement("div");
            finalConfig.container = container;
            this.appendChild(container);
            // 检查 APlayer 是否存在，再创建实例
            if (window.APlayer) {
                this.aplayer = new APlayer(finalConfig);
                console.log('MetingJS 播放器初始化成功');
            } else {
                throw new Error('APlayer 未加载，无法创建播放器');
            }
        } catch (e) {
            console.error('MetingJS 加载播放器失败:', e);
        }
    }
}

// 注册自定义元素（确保只注册一次）
if (window.customElements && !window.customElements.get("meting-js")) {
    window.MetingJSElement = MetingJSElement;
    window.customElements.define("meting-js", MetingJSElement);
    console.log("\n %c MetingJS v2.0.1（已修复销毁错误） %c https://github.com/metowolf/MetingJS \n", "color: #fadfa3; background: #030307; padding:5px 0;", "background: #fadfa3; padding:5px 0;");
}
